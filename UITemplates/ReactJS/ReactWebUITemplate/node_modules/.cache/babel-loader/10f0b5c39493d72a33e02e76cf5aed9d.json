{"ast":null,"code":"// // \n// import axios from 'axios';\n// import { toast } from 'react-toastify';\n// import { Endpoints } from '../utils/apiConst';\n// import Cookie from 'js-cookie';\n// export type Token = {\n//   token: string,\n// };\n// /** Setup an Axios instance */\n// export const api = axios.create({\n//   baseURL: Endpoints.API_BASE_URL,\n//   timeout: 1000,\n// });\n// api.interceptors.request.use(function (config) {\n//   // config.headers.Authorization = `Bearer ${token}`;\n//   const token = Cookie.get('auth-token');\n//   config.headers.Authorization = token;\n//   return config;\n// });\n// api.interceptors.response.use(null, (ex) => {\n//   let errrorMessage = 'Oops, something is wrong! Try again.';\n//   if (ex.response) {\n//     const errorData = ex.response.data;\n//     if (errorData.errors && errorData.errors.length) {\n//       // Only show first error from the list of errors\n//       errrorMessage = errorData.errors[0];\n//     } else if (errorData.fault) {\n//       errrorMessage = errorData.fault.faultstring;\n//     }\n//   } else {\n//     toast.error(errrorMessage);\n//   }\n//   return Promise.reject(ex);\n// });","map":{"version":3,"sources":["/Users/ctkit/git/Pollux/Web/src/app/helpers/apiHelper.js"],"names":[],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["// // @flow\n\n// import axios from 'axios';\n// import { toast } from 'react-toastify';\n// import { Endpoints } from '../utils/apiConst';\n// import Cookie from 'js-cookie';\n// export type Token = {\n//   token: string,\n// };\n// /** Setup an Axios instance */\n// export const api = axios.create({\n//   baseURL: Endpoints.API_BASE_URL,\n//   timeout: 1000,\n// });\n\n// api.interceptors.request.use(function (config) {\n//   // config.headers.Authorization = `Bearer ${token}`;\n//   const token = Cookie.get('auth-token');\n//   config.headers.Authorization = token;\n//   return config;\n// });\n\n// api.interceptors.response.use(null, (ex) => {\n//   let errrorMessage = 'Oops, something is wrong! Try again.';\n//   if (ex.response) {\n//     const errorData = ex.response.data;\n//     if (errorData.errors && errorData.errors.length) {\n//       // Only show first error from the list of errors\n//       errrorMessage = errorData.errors[0];\n//     } else if (errorData.fault) {\n//       errrorMessage = errorData.fault.faultstring;\n//     }\n//   } else {\n//     toast.error(errrorMessage);\n//   }\n\n//   return Promise.reject(ex);\n// });\n"]},"metadata":{},"sourceType":"module"}