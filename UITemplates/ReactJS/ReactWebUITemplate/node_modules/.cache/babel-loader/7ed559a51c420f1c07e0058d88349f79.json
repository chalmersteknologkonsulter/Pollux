{"ast":null,"code":"var _jsxFileName = \"/Users/ctkit/git/Pollux/Web/src/app/screens/User/List.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport MaterialTable, { MTableToolbar } from 'material-table';\nimport { Chip, Button } from '@material-ui/core';\nimport { getCustomer } from '../../api/customerApi';\nimport CreationDialog from './Form';\nimport DeleteConfirmationDialog from '../../components/DeleteConfirmationDialog'; // import { api } from '../../helpers/apiHelper';\n\nimport UserContext from '../../context';\nimport { UserTypes } from '../../utils/appConst';\nconst userTypes = [{\n  type: 1,\n  name: 'FastEx-användare'\n}, {\n  type: 2,\n  name: 'Kundanvändare'\n}, {\n  type: 3,\n  name: 'Appanvändare'\n}];\nexport default class UserListList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      users: [],\n      customers: []\n    };\n\n    this.getUsers = () => {\n      api.get('/users').then(res => this.setState({\n        users: res.data\n      }));\n    };\n\n    this.getCustomers = () => {\n      getCustomer().then(data => {\n        this.setState({\n          customers: data\n        });\n      });\n    };\n\n    this.onSaveHandler = data => {\n      let payload = { ...data\n      };\n\n      if (data.UserId) {\n        api.put('/users/', payload).then(response => this.getUsers());\n      } else {\n        api.post('/users/', payload).then(response => this.getUsers());\n      }\n    };\n\n    this.onDeleteConfirmation = ({\n      UserId\n    }) => {\n      api.delete('/users/', {\n        params: {\n          userId: UserId\n        }\n      }).then(response => this.getUsers());\n    };\n\n    this.getCustomerName = () => {\n      const customerDictionary = {};\n      this.state.customers.map(customer => {\n        const {\n          CustomerId,\n          CustomerName\n        } = customer;\n        customerDictionary[CustomerId] = CustomerName;\n      });\n      return customerDictionary;\n    };\n  }\n\n  componentDidMount() {\n    console.log('user types', UserTypes);\n    this.getUsers();\n    this.getCustomers();\n  }\n\n  render() {\n    const {\n      user\n    } = this.context;\n    return /*#__PURE__*/React.createElement(MaterialTable, {\n      title: \"Anv\\xE4ndare\",\n      columns: [{\n        title: 'Namn',\n        field: 'UserName'\n      }, {\n        title: 'Användarnamn',\n        field: 'UserLoginId'\n      }, {\n        title: 'Användartyp',\n        field: 'UserType',\n        lookup: {\n          1: 'FastEx-användare',\n          2: 'Kundanvändare',\n          3: 'Appanvändare'\n        }\n      }, {\n        title: 'Kund',\n        field: 'CustomerId',\n        lookup: this.getCustomerName()\n      }, {\n        title: 'Status',\n        field: 'IsActive',\n        lookup: {\n          1: 'Aktiv',\n          0: 'Inaktiv'\n        }\n      }],\n      data: this.state.users,\n      actions: [{\n        icon: 'add',\n        tooltip: 'Add User',\n        isFreeAction: true\n      }, {\n        icon: 'edit',\n        tooltip: 'Edit User'\n      }, {\n        icon: 'delete',\n        tooltip: 'Delete User',\n        onClick: (event, rowData) => this.onDeleteConfirmation(rowData)\n      }],\n      options: {\n        actionsColumnIndex: -1,\n        pageSize: 20\n      },\n      components: {\n        Action: props => {\n          if (props.action.icon === 'add') {\n            return /*#__PURE__*/React.createElement(CreationDialog, {\n              onSave: this.onSaveHandler,\n              customers: this.state.customers,\n              userTypes: userTypes,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 17\n              }\n            });\n          }\n\n          if (props.action.icon === 'edit') {\n            return /*#__PURE__*/React.createElement(CreationDialog, {\n              isEdit: true,\n              user: props.data,\n              customers: this.state.customers,\n              userTypes: userTypes,\n              onSave: this.onSaveHandler,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 17\n              }\n            });\n          }\n\n          if (props.action.icon === 'delete') {\n            return /*#__PURE__*/React.createElement(DeleteConfirmationDialog, {\n              title: \"Bekr\\xE4ftelse\",\n              message: \"\\xC4r du s\\xE4ker p\\xE5 att du vill radera denna anv\\xE4ndare?\",\n              onConfirmation: event => props.action.onClick(event, props.data),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 17\n              }\n            });\n          } else return null;\n        }\n      },\n      localization: {\n        body: {\n          emptyDataSourceMessage: 'Ingen information att visa'\n        },\n        toolbar: {\n          searchTooltip: 'Sök',\n          searchPlaceholder: 'Sök'\n        },\n        pagination: {\n          labelRowsSelect: 'Rader',\n          labelDisplayedRows: '{from}-{to} av {count}'\n        },\n        header: {\n          actions: 'Aktion'\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\nUserListList.contextType = UserContext;","map":{"version":3,"sources":["/Users/ctkit/git/Pollux/Web/src/app/screens/User/List.js"],"names":["React","Component","ReactDOM","MaterialTable","MTableToolbar","Chip","Button","getCustomer","CreationDialog","DeleteConfirmationDialog","UserContext","UserTypes","userTypes","type","name","UserListList","state","users","customers","getUsers","api","get","then","res","setState","data","getCustomers","onSaveHandler","payload","UserId","put","response","post","onDeleteConfirmation","delete","params","userId","getCustomerName","customerDictionary","map","customer","CustomerId","CustomerName","componentDidMount","console","log","render","user","context","title","field","lookup","icon","tooltip","isFreeAction","onClick","event","rowData","actionsColumnIndex","pageSize","Action","props","action","body","emptyDataSourceMessage","toolbar","searchTooltip","searchPlaceholder","pagination","labelRowsSelect","labelDisplayedRows","header","actions","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport MaterialTable, { MTableToolbar } from 'material-table';\nimport { Chip, Button } from '@material-ui/core';\nimport { getCustomer } from '../../api/customerApi';\nimport CreationDialog from './Form';\nimport DeleteConfirmationDialog from '../../components/DeleteConfirmationDialog';\n// import { api } from '../../helpers/apiHelper';\nimport UserContext from '../../context';\nimport { UserTypes } from '../../utils/appConst';\n\nconst userTypes = [\n  { type: 1, name: 'FastEx-användare' },\n  { type: 2, name: 'Kundanvändare' },\n  { type: 3, name: 'Appanvändare' },\n];\n\nexport default class UserListList extends Component {\n  state = {\n    users: [],\n    customers: [],\n  };\n\n  static contextType = UserContext;\n\n  getUsers = () => {\n    api.get('/users').then((res) => this.setState({ users: res.data }));\n  };\n\n  getCustomers = () => {\n    getCustomer().then((data) => {\n      this.setState({ customers: data });\n    });\n  };\n\n  componentDidMount() {\n    console.log('user types', UserTypes);\n    this.getUsers();\n    this.getCustomers();\n  }\n\n  onSaveHandler = (data) => {\n    let payload = {\n      ...data,\n    };\n    if (data.UserId) {\n      api.put('/users/', payload).then((response) => this.getUsers());\n    } else {\n      api.post('/users/', payload).then((response) => this.getUsers());\n    }\n  };\n\n  onDeleteConfirmation = ({ UserId }) => {\n    api\n      .delete('/users/', {\n        params: {\n          userId: UserId,\n        },\n      })\n      .then((response) => this.getUsers());\n  };\n\n  getCustomerName = () => {\n    const customerDictionary = {};\n    this.state.customers.map((customer) => {\n      const { CustomerId, CustomerName } = customer;\n      customerDictionary[CustomerId] = CustomerName;\n    });\n    return customerDictionary;\n  };\n\n  render() {\n    const { user } = this.context;\n    return (\n      <MaterialTable\n        title='Användare'\n        columns={[\n          {\n            title: 'Namn',\n            field: 'UserName',\n          },\n          { title: 'Användarnamn', field: 'UserLoginId' },\n          {\n            title: 'Användartyp',\n            field: 'UserType',\n            lookup: {\n              1: 'FastEx-användare',\n              2: 'Kundanvändare',\n              3: 'Appanvändare',\n            },\n          },\n          {\n            title: 'Kund',\n            field: 'CustomerId',\n            lookup: this.getCustomerName(),\n          },\n          {\n            title: 'Status',\n            field: 'IsActive',\n            lookup: { 1: 'Aktiv', 0: 'Inaktiv' },\n          },\n        ]}\n        data={this.state.users}\n        actions={[\n          {\n            icon: 'add',\n            tooltip: 'Add User',\n            isFreeAction: true,\n          },\n          {\n            icon: 'edit',\n            tooltip: 'Edit User',\n          },\n          {\n            icon: 'delete',\n            tooltip: 'Delete User',\n            onClick: (event, rowData) => this.onDeleteConfirmation(rowData),\n          },\n        ]}\n        options={{\n          actionsColumnIndex: -1,\n          pageSize: 20,\n        }}\n        components={{\n          Action: (props) => {\n            if (props.action.icon === 'add') {\n              return (\n                <CreationDialog\n                  onSave={this.onSaveHandler}\n                  customers={this.state.customers}\n                  userTypes={userTypes}\n                ></CreationDialog>\n              );\n            }\n            if (props.action.icon === 'edit') {\n              return (\n                <CreationDialog\n                  isEdit={true}\n                  user={props.data}\n                  customers={this.state.customers}\n                  userTypes={userTypes}\n                  onSave={this.onSaveHandler}\n                ></CreationDialog>\n              );\n            }\n            if (props.action.icon === 'delete') {\n              return (\n                <DeleteConfirmationDialog\n                  title='Bekräftelse'\n                  message='Är du säker på att du vill radera denna användare?'\n                  onConfirmation={(event) =>\n                    props.action.onClick(event, props.data)\n                  }\n                ></DeleteConfirmationDialog>\n              );\n            } else return null;\n          },\n        }}\n        localization={{\n          body: {\n            emptyDataSourceMessage: 'Ingen information att visa',\n          },\n          toolbar: {\n            searchTooltip: 'Sök',\n            searchPlaceholder: 'Sök',\n          },\n          pagination: {\n            labelRowsSelect: 'Rader',\n            labelDisplayedRows: '{from}-{to} av {count}',\n          },\n          header: {\n            actions: 'Aktion',\n          },\n        }}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}