{"ast":null,"code":"var _class,\n    _temp,\n    _jsxFileName = \"/Users/ctkit/git/Pollux/Web/src/app/screens/Reports/ProjectReports.js\";\n\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport MaterialTable, { MTableToolbar } from 'material-table';\nimport { Chip, Button, Grid, FormControlLabel, Checkbox, withStyles, Typography, TextField, InputLabel, Select, MenuItem } from '@material-ui/core';\nimport { api } from '../../helpers/apiHelper';\nimport moment from 'moment';\nimport ReactSelect from 'react-select';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardTimePicker, KeyboardDatePicker } from '@material-ui/pickers';\nimport UserContext from '../../context';\n\nconst styles = theme => ({\n  root: {},\n  gridContainer: {\n    display: 'flex',\n    alignItems: 'baseline',\n    paddingLeft: 30,\n    justifyContent: 'space-between'\n  },\n  checkboxControl: {\n    display: 'block'\n  }\n});\n\nconst REPORT_TYPE_WITHDRAWAL = 1;\nconst REPORT_TYPE_ORDER = 2;\nconst REPORT_TYPE_PROJECT_SUMMARY = 3;\nconst reports = [{\n  value: 1,\n  label: 'Utplockshistorik'\n}, {\n  value: 2,\n  label: 'Beställningshistorik'\n}, {\n  value: 3,\n  label: 'Projektsammanfattning'\n}];\nexport default withStyles(styles)((_temp = _class = class ProjectRepots extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      projects: [],\n      reportData: []\n    };\n\n    this.getProjects = () => {\n      const {\n        user\n      } = this.context;\n      api.get('/projects').then(res => {\n        let items = res.data.map(item => {\n          return {\n            value: item.ProjectCode,\n            label: item.ProjectCode,\n            customerId: user.CustomerId\n          };\n        });\n        this.setState({\n          projects: items\n        });\n      });\n    };\n\n    this.getProjectsByCustomer = () => {\n      const {\n        user\n      } = this.context;\n      const payLoad = this.state.myCustomer ? {\n        params: {\n          sellerId: user.UserId\n        }\n      } : {};\n      api.get('/projects-by-customer', payLoad).then(res => {\n        let items = res.data.map(item => {\n          return {\n            value: item.CustomerId + '_' + item.ProjectCode,\n            label: item.ProjectCode + ' - ' + item.CustomerName,\n            customerId: item.CustomerId\n          };\n        });\n        this.setState({\n          projects: items\n        });\n      });\n    };\n\n    this.getWithdrawalsSummaryByProjectCode = () => {\n      api.get('/withdrawals_summary_by_project_code', this.getPayload()).then(res => {\n        this.setState({\n          reportData: res.data\n        });\n      });\n    };\n\n    this.getWithdrawalsHistoryByProjectCode = () => {\n      api.get('/withdrawals_history_by_project_code', this.getPayload()).then(res => {\n        this.setState({\n          reportData: res.data\n        });\n      });\n    };\n\n    this.getOrdersHistoryByProjectCode = () => {\n      api.get('/orders_history_by_project_code', this.getPayload()).then(res => {\n        this.setState({\n          reportData: res.data\n        });\n      });\n    };\n\n    this.getOrdersByProjectCode = () => {\n      api.get('/orders_summary_by_project_code', this.getPayload()).then(res => {\n        this.setState({\n          reportData: res.data\n        });\n      });\n    };\n\n    this.getProjectSummary = () => {\n      api.get('/projects-summary', this.getPayload()).then(res => {\n        this.setState({\n          reportData: res.data\n        });\n      });\n    };\n\n    this.getPayload = () => {\n      const {\n        user\n      } = this.context;\n      return {\n        params: {\n          projectCode: user.CustomerId ? this.state.selectedProject.value : this.state.selectedProject.value.split(/_(.+)/)[1],\n          customerId: this.state.selectedProject.customerId\n        }\n      };\n    };\n\n    this.onLoadClick = () => {\n      if (this.state.selectedReport.value === REPORT_TYPE_WITHDRAWAL) this.getWithdrawalsHistoryByProjectCode();else if (this.state.selectedReport.value === REPORT_TYPE_ORDER) this.getOrdersHistoryByProjectCode();else if (this.state.selectedReport.value === REPORT_TYPE_PROJECT_SUMMARY) this.getProjectSummary();\n    };\n\n    this.handleChange = selectedProject => {\n      this.setState({\n        selectedProject\n      });\n      console.log(this.state);\n    };\n\n    this.handleReportTypeChange = selectedReport => {\n      this.setState({\n        selectedReport,\n        reportData: []\n      });\n    };\n\n    this.handleMyCustomerCheckChange = event => {\n      this.setState({\n        myCustomer: event.target.checked\n      }, () => this.getProjectsByCustomer());\n    };\n  }\n\n  componentDidMount() {\n    const {\n      user\n    } = this.context;\n    if (user.CustomerId) this.getProjects();else this.getProjectsByCustomer();\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    const {\n      user\n    } = this.context;\n    return /*#__PURE__*/React.createElement(MaterialTable, {\n      title: \"Projektrapporter\",\n      columns: this.state.selectedReport && this.state.selectedReport.value === REPORT_TYPE_PROJECT_SUMMARY ? [{\n        title: 'Artikelnummer',\n        field: 'ArticleNumber'\n      }, {\n        title: 'Beskrivning',\n        field: 'Description'\n      }, {\n        title: 'Beställning',\n        field: 'OrderQuantity'\n      }, {\n        title: 'Utplock',\n        field: 'WithdrawQuantity'\n      }] : [{\n        title: 'Kund',\n        field: 'CustomerName'\n      }, {\n        title: 'Användare',\n        field: 'UserName'\n      }, {\n        title: 'Datum',\n        field: 'CreationDate',\n        render: rowData => /*#__PURE__*/React.createElement(Typography, {\n          variant: \"body\",\n          gutterBottom: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 23\n          }\n        }, moment(rowData.CreationDate).format('YYYY-MM-DD  kk:mm:ss'))\n      }, {\n        title: 'Märkning',\n        field: 'ProjectCode'\n      }, {\n        title: 'Artikelnummer',\n        field: 'ArticleNumber'\n      }, {\n        title: 'Beskrivning',\n        field: 'Description'\n      }, {\n        title: 'Kvantitet',\n        field: 'Quantity'\n      }],\n      data: this.state.reportData,\n      options: {\n        actionsColumnIndex: -1,\n        pageSize: 10,\n        exportButton: true\n      },\n      components: {\n        Toolbar: props => /*#__PURE__*/React.createElement(\"div\", {\n          className: classes.root,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 15\n          }\n        }, /*#__PURE__*/React.createElement(MTableToolbar, Object.assign({}, props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 17\n          }\n        })), /*#__PURE__*/React.createElement(Grid, {\n          container: true,\n          item: true,\n          xs: 9,\n          className: classes.gridContainer,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            zIndex: 100,\n            width: 300\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 19\n          }\n        }, /*#__PURE__*/React.createElement(ReactSelect, {\n          value: this.state.selectedProject,\n          onChange: this.handleChange,\n          placeholder: 'Välj projekt',\n          options: this.state.projects,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 21\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            zIndex: 100,\n            width: 200\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 19\n          }\n        }, /*#__PURE__*/React.createElement(ReactSelect, {\n          value: this.state.selectedReport,\n          placeholder: 'Välj rapporttyp',\n          onChange: this.handleReportTypeChange,\n          options: reports,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 21\n          }\n        })), !user.CustomerId && /*#__PURE__*/React.createElement(FormControlLabel, {\n          className: classes.checkboxControl,\n          control: /*#__PURE__*/React.createElement(Checkbox, {\n            checked: this.state.myCustomer == 1,\n            onChange: this.handleMyCustomerCheckChange,\n            name: \"IsActive\",\n            color: \"primary\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 25\n            }\n          }),\n          label: \"Mina kunder\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 21\n          }\n        }), /*#__PURE__*/React.createElement(Button, {\n          color: \"secondary\",\n          variant: \"contained\",\n          onClick: this.onLoadClick,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 19\n          }\n        }, \"H\\xE4mta\")))\n      },\n      localization: {\n        body: {\n          emptyDataSourceMessage: 'Ingen information att visa'\n        },\n        toolbar: {\n          searchTooltip: 'Sök',\n          searchPlaceholder: 'Sök'\n        },\n        pagination: {\n          labelRowsSelect: 'Rader',\n          labelDisplayedRows: '{from}-{to} av {count}'\n        },\n        header: {\n          actions: 'Aktion'\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }\n    });\n  }\n\n}, _class.contextType = UserContext, _temp));","map":{"version":3,"sources":["/Users/ctkit/git/Pollux/Web/src/app/screens/Reports/ProjectReports.js"],"names":["React","Component","ReactDOM","MaterialTable","MTableToolbar","Chip","Button","Grid","FormControlLabel","Checkbox","withStyles","Typography","TextField","InputLabel","Select","MenuItem","api","moment","ReactSelect","DateFnsUtils","MuiPickersUtilsProvider","KeyboardTimePicker","KeyboardDatePicker","UserContext","styles","theme","root","gridContainer","display","alignItems","paddingLeft","justifyContent","checkboxControl","REPORT_TYPE_WITHDRAWAL","REPORT_TYPE_ORDER","REPORT_TYPE_PROJECT_SUMMARY","reports","value","label","ProjectRepots","state","projects","reportData","getProjects","user","context","get","then","res","items","data","map","item","ProjectCode","customerId","CustomerId","setState","getProjectsByCustomer","payLoad","myCustomer","params","sellerId","UserId","CustomerName","getWithdrawalsSummaryByProjectCode","getPayload","getWithdrawalsHistoryByProjectCode","getOrdersHistoryByProjectCode","getOrdersByProjectCode","getProjectSummary","projectCode","selectedProject","split","onLoadClick","selectedReport","handleChange","console","log","handleReportTypeChange","handleMyCustomerCheckChange","event","target","checked","componentDidMount","render","classes","props","title","field","rowData","CreationDate","format","actionsColumnIndex","pageSize","exportButton","Toolbar","zIndex","width","body","emptyDataSourceMessage","toolbar","searchTooltip","searchPlaceholder","pagination","labelRowsSelect","labelDisplayedRows","header","actions","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport MaterialTable, { MTableToolbar } from 'material-table';\nimport {\n  Chip,\n  Button,\n  Grid,\n  FormControlLabel,\n  Checkbox,\n  withStyles,\n  Typography,\n  TextField,\n  InputLabel,\n  Select,\n  MenuItem,\n} from '@material-ui/core';\nimport { api } from '../../helpers/apiHelper';\nimport moment from 'moment';\n\nimport ReactSelect from 'react-select';\n\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\n\nimport UserContext from '../../context';\n\nconst styles = (theme) => ({\n  root: {},\n  gridContainer: {\n    display: 'flex',\n    alignItems: 'baseline',\n    paddingLeft: 30,\n    justifyContent: 'space-between',\n  },\n  checkboxControl: {\n    display: 'block',\n  },\n});\n\nconst REPORT_TYPE_WITHDRAWAL = 1;\nconst REPORT_TYPE_ORDER = 2;\nconst REPORT_TYPE_PROJECT_SUMMARY = 3;\n\nconst reports = [\n  { value: 1, label: 'Utplockshistorik' },\n  { value: 2, label: 'Beställningshistorik' },\n  { value: 3, label: 'Projektsammanfattning' },\n];\n\nexport default withStyles(styles)(\n  class ProjectRepots extends Component {\n    state = {\n      projects: [],\n      reportData: [],\n    };\n    static contextType = UserContext;\n\n    getProjects = () => {\n      const { user } = this.context;\n\n      api.get('/projects').then((res) => {\n        let items = res.data.map((item) => {\n          return {\n            value: item.ProjectCode,\n            label: item.ProjectCode,\n            customerId: user.CustomerId,\n          };\n        });\n        this.setState({ projects: items });\n      });\n    };\n\n    getProjectsByCustomer = () => {\n      const { user } = this.context;\n\n      const payLoad = this.state.myCustomer\n        ? {\n            params: {\n              sellerId: user.UserId,\n            },\n          }\n        : {};\n\n      api.get('/projects-by-customer', payLoad).then((res) => {\n        let items = res.data.map((item) => {\n          return {\n            value: item.CustomerId + '_' + item.ProjectCode,\n            label: item.ProjectCode + ' - ' + item.CustomerName,\n            customerId: item.CustomerId,\n          };\n        });\n        this.setState({ projects: items });\n      });\n    };\n\n    getWithdrawalsSummaryByProjectCode = () => {\n      api\n        .get('/withdrawals_summary_by_project_code', this.getPayload())\n        .then((res) => {\n          this.setState({ reportData: res.data });\n        });\n    };\n\n    getWithdrawalsHistoryByProjectCode = () => {\n      api\n        .get('/withdrawals_history_by_project_code', this.getPayload())\n        .then((res) => {\n          this.setState({ reportData: res.data });\n        });\n    };\n\n    getOrdersHistoryByProjectCode = () => {\n      api\n        .get('/orders_history_by_project_code', this.getPayload())\n        .then((res) => {\n          this.setState({ reportData: res.data });\n        });\n    };\n\n    getOrdersByProjectCode = () => {\n      api\n        .get('/orders_summary_by_project_code', this.getPayload())\n        .then((res) => {\n          this.setState({ reportData: res.data });\n        });\n    };\n    getProjectSummary = () => {\n      api.get('/projects-summary', this.getPayload()).then((res) => {\n        this.setState({ reportData: res.data });\n      });\n    };\n\n    getPayload = () => {\n      const { user } = this.context;\n      return {\n        params: {\n          projectCode: user.CustomerId\n            ? this.state.selectedProject.value\n            : this.state.selectedProject.value.split(/_(.+)/)[1],\n          customerId: this.state.selectedProject.customerId,\n        },\n      };\n    };\n\n    componentDidMount() {\n      const { user } = this.context;\n      if (user.CustomerId) this.getProjects();\n      else this.getProjectsByCustomer();\n    }\n\n    onLoadClick = () => {\n      if (this.state.selectedReport.value === REPORT_TYPE_WITHDRAWAL)\n        this.getWithdrawalsHistoryByProjectCode();\n      else if (this.state.selectedReport.value === REPORT_TYPE_ORDER)\n        this.getOrdersHistoryByProjectCode();\n      else if (this.state.selectedReport.value === REPORT_TYPE_PROJECT_SUMMARY)\n        this.getProjectSummary();\n    };\n\n    handleChange = (selectedProject) => {\n      this.setState({ selectedProject });\n      console.log(this.state);\n    };\n\n    handleReportTypeChange = (selectedReport) => {\n      this.setState({ selectedReport, reportData: [] });\n    };\n\n    handleMyCustomerCheckChange = (event) => {\n      this.setState({ myCustomer: event.target.checked }, () =>\n        this.getProjectsByCustomer()\n      );\n    };\n    render() {\n      const { classes } = this.props;\n      const { user } = this.context;\n      return (\n        <MaterialTable\n          title='Projektrapporter'\n          columns={\n            this.state.selectedReport &&\n            this.state.selectedReport.value === REPORT_TYPE_PROJECT_SUMMARY\n              ? [\n                  {\n                    title: 'Artikelnummer',\n                    field: 'ArticleNumber',\n                  },\n                  {\n                    title: 'Beskrivning',\n                    field: 'Description',\n                  },\n                  {\n                    title: 'Beställning',\n                    field: 'OrderQuantity',\n                  },\n                  {\n                    title: 'Utplock',\n                    field: 'WithdrawQuantity',\n                  },\n                ]\n              : [\n                  {\n                    title: 'Kund',\n                    field: 'CustomerName',\n                  },\n                  { title: 'Användare', field: 'UserName' },\n                  {\n                    title: 'Datum',\n                    field: 'CreationDate',\n                    render: (rowData) => (\n                      <Typography variant='body' gutterBottom>\n                        {moment(rowData.CreationDate).format(\n                          'YYYY-MM-DD  kk:mm:ss'\n                        )}\n                      </Typography>\n                    ),\n                  },\n                  {\n                    title: 'Märkning',\n                    field: 'ProjectCode',\n                  },\n                  {\n                    title: 'Artikelnummer',\n                    field: 'ArticleNumber',\n                  },\n                  {\n                    title: 'Beskrivning',\n                    field: 'Description',\n                  },\n                  {\n                    title: 'Kvantitet',\n                    field: 'Quantity',\n                  },\n                ]\n          }\n          data={this.state.reportData}\n          options={{\n            actionsColumnIndex: -1,\n            pageSize: 10,\n            exportButton: true,\n          }}\n          components={{\n            Toolbar: (props) => (\n              <div className={classes.root}>\n                <MTableToolbar {...props} />\n                <Grid container item xs={9} className={classes.gridContainer}>\n                  <div\n                    style={{\n                      zIndex: 100,\n                      width: 300,\n                    }}\n                  >\n                    <ReactSelect\n                      value={this.state.selectedProject}\n                      onChange={this.handleChange}\n                      placeholder={'Välj projekt'}\n                      options={this.state.projects}\n                    />\n                  </div>\n\n                  <div\n                    style={{\n                      zIndex: 100,\n                      width: 200,\n                    }}\n                  >\n                    <ReactSelect\n                      value={this.state.selectedReport}\n                      placeholder={'Välj rapporttyp'}\n                      onChange={this.handleReportTypeChange}\n                      options={reports}\n                    />\n                  </div>\n                  {!user.CustomerId && (\n                    <FormControlLabel\n                      className={classes.checkboxControl}\n                      control={\n                        <Checkbox\n                          checked={this.state.myCustomer == 1}\n                          onChange={this.handleMyCustomerCheckChange}\n                          name='IsActive'\n                          color='primary'\n                        />\n                      }\n                      label='Mina kunder'\n                    />\n                  )}\n                  <Button\n                    color='secondary'\n                    variant='contained'\n                    onClick={this.onLoadClick}\n                  >\n                    Hämta\n                  </Button>\n                </Grid>\n              </div>\n            ),\n          }}\n          localization={{\n            body: {\n              emptyDataSourceMessage: 'Ingen information att visa',\n            },\n            toolbar: {\n              searchTooltip: 'Sök',\n              searchPlaceholder: 'Sök',\n            },\n            pagination: {\n              labelRowsSelect: 'Rader',\n              labelDisplayedRows: '{from}-{to} av {count}',\n            },\n            header: {\n              actions: 'Aktion',\n            },\n          }}\n        />\n      );\n    }\n  }\n);\n"]},"metadata":{},"sourceType":"module"}