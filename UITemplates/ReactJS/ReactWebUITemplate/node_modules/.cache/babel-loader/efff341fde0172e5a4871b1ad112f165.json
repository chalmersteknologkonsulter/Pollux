{"ast":null,"code":"var _jsxFileName = \"/Users/ctkit/git/Pollux/Web/src/app/screens/Customer/List.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport MaterialTable, { MTableToolbar } from 'material-table';\nimport { Chip, Button } from '@material-ui/core';\nimport { getCustomer, createCustomer, updateCustomer, deleteCustomer } from '../../api/customerApi';\nimport { getSeller } from '../../api/sellerApi'; // import { api } from '../../helpers/apiHelper';\n\nimport CreationDialog from './Form';\nimport DeleteConfirmationDialog from '../../components/DeleteConfirmationDialog';\nexport default class CustomerList extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      customers: [],\n      sellers: []\n    };\n\n    this.getCustomers = () => {// getCustomer().then((data) => {\n      //   this.setState({ customers: data });\n      // });\n    };\n\n    this.getSellers = () => {// api\n      //   .get('/sellers')\n      //   .then((res) => this.setState({ sellers: res.data }));\n    };\n\n    this.onSaveHandler = data => {// let payLoad = {\n      //   ...data,\n      // };\n      // if (data.CustomerId) {\n      //   updateCustomer(payLoad).then((res) => {\n      //     this.getCustomers();\n      //   });\n      // } else {\n      //   createCustomer(payLoad).then((res) => {\n      //     this.getCustomers();\n      //   });\n      // }\n    };\n\n    this.onDeleteConfirmation = ({\n      CustomerId\n    }) => {\n      deleteCustomer(CustomerId).then(res => {\n        this.getCustomers();\n      });\n    };\n\n    this.getSellerName = () => {\n      const sellerDictionary = {};\n      this.state.sellers.map(seller => {\n        const {\n          SellerId,\n          SellerName\n        } = seller;\n        sellerDictionary[SellerId] = SellerName;\n      });\n      return sellerDictionary;\n    };\n  }\n\n  componentDidMount() {// this.getCustomers();\n    // this.getSellers();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(MaterialTable, {\n      title: \"Kunder\",\n      columns: [{\n        title: 'Namn',\n        field: 'CustomerName'\n      }, {\n        title: 'Adress',\n        field: 'BusinessAddress'\n      }, {\n        title: 'Säljkontakt',\n        field: 'SellerId',\n        lookup: this.getSellerName()\n      }],\n      data: this.state.customers,\n      actions: [{\n        icon: 'add',\n        tooltip: 'Add Customer',\n        isFreeAction: true\n      }, {\n        icon: 'save',\n        tooltip: 'Save Customer'\n      }, {\n        icon: 'delete',\n        tooltip: 'delete Customer',\n        onClick: (event, rowData) => this.onDeleteConfirmation(rowData)\n      }],\n      options: {\n        actionsColumnIndex: -1\n      },\n      components: {\n        Action: props => {\n          if (props.action.icon === 'add') {\n            return /*#__PURE__*/React.createElement(CreationDialog, {\n              onSave: this.onSaveHandler,\n              sellers: this.state.sellers,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 17\n              }\n            });\n          }\n\n          if (props.action.icon === 'save') {\n            return /*#__PURE__*/React.createElement(CreationDialog, {\n              isEdit: true,\n              customer: props.data,\n              sellers: this.state.sellers,\n              onSave: this.onSaveHandler,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 17\n              }\n            });\n          }\n\n          if (props.action.icon === 'delete') {\n            return /*#__PURE__*/React.createElement(DeleteConfirmationDialog, {\n              title: \"Bekr\\xE4ftelse\",\n              message: \"\\xC4r du s\\xE4ker p\\xE5 att du vill radera denna kund?\",\n              onConfirmation: event => props.action.onClick(event, props.data),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 17\n              }\n            });\n          } else return null;\n        }\n      },\n      localization: {\n        body: {\n          emptyDataSourceMessage: 'Ingen information att visa'\n        },\n        toolbar: {\n          searchTooltip: 'Sök',\n          searchPlaceholder: 'Sök'\n        },\n        pagination: {\n          labelRowsSelect: 'Rader',\n          labelDisplayedRows: '{from}-{to} av {count}'\n        },\n        header: {\n          actions: 'Aktion'\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/ctkit/git/Pollux/Web/src/app/screens/Customer/List.js"],"names":["React","Component","ReactDOM","MaterialTable","MTableToolbar","Chip","Button","getCustomer","createCustomer","updateCustomer","deleteCustomer","getSeller","CreationDialog","DeleteConfirmationDialog","CustomerList","state","customers","sellers","getCustomers","getSellers","onSaveHandler","data","onDeleteConfirmation","CustomerId","then","res","getSellerName","sellerDictionary","map","seller","SellerId","SellerName","componentDidMount","render","title","field","lookup","icon","tooltip","isFreeAction","onClick","event","rowData","actionsColumnIndex","Action","props","action","body","emptyDataSourceMessage","toolbar","searchTooltip","searchPlaceholder","pagination","labelRowsSelect","labelDisplayedRows","header","actions"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport MaterialTable, { MTableToolbar } from 'material-table';\nimport { Chip, Button } from '@material-ui/core';\nimport {\n  getCustomer,\n  createCustomer,\n  updateCustomer,\n  deleteCustomer,\n} from '../../api/customerApi';\nimport { getSeller } from '../../api/sellerApi';\n// import { api } from '../../helpers/apiHelper';\nimport CreationDialog from './Form';\nimport DeleteConfirmationDialog from '../../components/DeleteConfirmationDialog';\n\nexport default class CustomerList extends Component {\n  state = {\n    customers: [],\n    sellers: [],\n  };\n  getCustomers = () => {\n    // getCustomer().then((data) => {\n    //   this.setState({ customers: data });\n    // });\n  };\n\n  getSellers = () => {\n    // api\n    //   .get('/sellers')\n    //   .then((res) => this.setState({ sellers: res.data }));\n  };\n\n  componentDidMount() {\n    // this.getCustomers();\n    // this.getSellers();\n  }\n\n  onSaveHandler = (data) => {\n    // let payLoad = {\n    //   ...data,\n    // };\n    // if (data.CustomerId) {\n    //   updateCustomer(payLoad).then((res) => {\n    //     this.getCustomers();\n    //   });\n    // } else {\n    //   createCustomer(payLoad).then((res) => {\n    //     this.getCustomers();\n    //   });\n    // }\n  };\n\n  onDeleteConfirmation = ({ CustomerId }) => {\n    deleteCustomer(CustomerId).then((res) => {\n      this.getCustomers();\n    });\n  };\n\n  getSellerName = () => {\n    const sellerDictionary = {};\n    this.state.sellers.map((seller) => {\n      const { SellerId, SellerName } = seller;\n      sellerDictionary[SellerId] = SellerName;\n    });\n    return sellerDictionary;\n  };\n\n  render() {\n    return (\n      <MaterialTable\n        title='Kunder'\n        columns={[\n          {\n            title: 'Namn',\n            field: 'CustomerName',\n          },\n          { title: 'Adress', field: 'BusinessAddress' },\n          {\n            title: 'Säljkontakt',\n            field: 'SellerId',\n            lookup: this.getSellerName(),\n          },\n        ]}\n        data={this.state.customers}\n        actions={[\n          {\n            icon: 'add',\n            tooltip: 'Add Customer',\n            isFreeAction: true,\n          },\n          {\n            icon: 'save',\n            tooltip: 'Save Customer',\n          },\n          {\n            icon: 'delete',\n            tooltip: 'delete Customer',\n            onClick: (event, rowData) => this.onDeleteConfirmation(rowData),\n          },\n        ]}\n        options={{\n          actionsColumnIndex: -1,\n        }}\n        components={{\n          Action: (props) => {\n            if (props.action.icon === 'add') {\n              return (\n                <CreationDialog\n                  onSave={this.onSaveHandler}\n                  sellers={this.state.sellers}\n                ></CreationDialog>\n              );\n            }\n            if (props.action.icon === 'save') {\n              return (\n                <CreationDialog\n                  isEdit={true}\n                  customer={props.data}\n                  sellers={this.state.sellers}\n                  onSave={this.onSaveHandler}\n                ></CreationDialog>\n              );\n            }\n            if (props.action.icon === 'delete') {\n              return (\n                <DeleteConfirmationDialog\n                  title='Bekräftelse'\n                  message='Är du säker på att du vill radera denna kund?'\n                  onConfirmation={(event) =>\n                    props.action.onClick(event, props.data)\n                  }\n                ></DeleteConfirmationDialog>\n              );\n            } else return null;\n          },\n        }}\n        localization={{\n          body: {\n            emptyDataSourceMessage: 'Ingen information att visa',\n          },\n          toolbar: {\n            searchTooltip: 'Sök',\n            searchPlaceholder: 'Sök',\n          },\n          pagination: {\n            labelRowsSelect: 'Rader',\n            labelDisplayedRows: '{from}-{to} av {count}',\n          },\n          header: {\n            actions: 'Aktion',\n          },\n        }}\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}